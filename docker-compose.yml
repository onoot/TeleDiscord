version: '3.8'

services:
  postgres:
    image: postgres:14
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend

  mongodb:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    networks:
      - backend

  redis:
    image: redis:latest
    command: redis-server --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    networks:
      - backend

  message-service:
    build: ./services/message-service
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PORT=${MESSAGE_SERVICE_PORT}
    ports:
      - "${MESSAGE_SERVICE_PORT}:${MESSAGE_SERVICE_PORT}"
    depends_on:
      - mongodb
      - redis
    networks:
      - backend

  user-service:
    build: ./services/user-service
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PORT=${USER_SERVICE_PORT}
    ports:
      - "${USER_SERVICE_PORT}:${USER_SERVICE_PORT}"
    depends_on:
      - postgres
    networks:
      - backend

  call-service:
    build: ./services/call-service
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PORT=${CALL_SERVICE_PORT}
    ports:
      - "${CALL_SERVICE_PORT}:${CALL_SERVICE_PORT}"
    depends_on:
      - redis
    networks:
      - backend

  channel-service:
    build: ./services/channel-service
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - PORT=${CHANNEL_SERVICE_PORT}
    ports:
      - "${CHANNEL_SERVICE_PORT}:${CHANNEL_SERVICE_PORT}"
    depends_on:
      - mongodb
    networks:
      - backend

  media-service:
    build: ./services/media-service
    environment:
      - MONGODB_URI=${MONGODB_URI}
      - PORT=${MEDIA_SERVICE_PORT}
    ports:
      - "${MEDIA_SERVICE_PORT}:${MEDIA_SERVICE_PORT}"
    depends_on:
      - mongodb
    networks:
      - backend

  notification-service:
    build: ./services/notification-service
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - PORT=${NOTIFICATION_SERVICE_PORT}
    ports:
      - "${NOTIFICATION_SERVICE_PORT}:${NOTIFICATION_SERVICE_PORT}"
    depends_on:
      - redis
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./kubernetes/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend
      - monitoring

  grafana:
    image: grafana/grafana:10.2.0
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ./kubernetes/monitoring/grafana-datasource.yaml:/etc/grafana/provisioning/datasources/datasource.yaml
      - ./kubernetes/monitoring/grafana-dashboards-config.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./kubernetes/monitoring:/var/lib/grafana/dashboards
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - monitoring

networks:
  backend:
    driver: bridge
  monitoring:
    driver: bridge

volumes:
  postgres_data:
  mongodb_data:
  redis_data: 